---
import { getLanguages } from "../helpers/store";
const languages = await getLanguages()
declare global {
    interface Window { refresh: () => void; }
}
const pageLanguage = Astro.params.language ?? 'en'

---
<div data-languages={Object.keys(languages).join(',')} class="language-switcher" id="language-switcher">
    <select class="mobile">
    {Object.entries(languages)
        .map(async ([langcode, { label, percentage }]) => <>
        <option selected={pageLanguage === langcode} value={langcode === 'en' ? '' : langcode}>
            {langcode}
        </option>
        </>)}
    </select>
    <select class="desktop">
    {Object.entries(languages)
        .map(async ([langcode, { label, percentage }]) => <>
        <option selected={pageLanguage === langcode} value={langcode === 'en' ? '' : langcode}>
            {`${label}${percentage === 100 ? '' : ` (${percentage}%)`}`}
        </option>
        </>)}
    </select>
</div>

<script>
    const knownLanguages = (document.querySelector('[data-languages]') as HTMLElement)?.dataset.languages?.split(',') ?? []
    const pageLanguage = document.documentElement.getAttribute('lang')
    const languageSwitcher = document.querySelector('#language-switcher')!
    const selectedOption = languageSwitcher.querySelector(`option[value="${pageLanguage}"]`)
    selectedOption?.setAttribute('selected', '')

    languageSwitcher.addEventListener('change', (event: any) => {
        const parts = location.pathname.trim().split('/').filter(Boolean)

        
        if (knownLanguages.includes(parts[0])) {
            parts[0] = event.target.value
        }
        else {
            parts.unshift(event.target.value)
        }

        /** @ts-ignore */
        window.location = `/${parts.filter(Boolean).join('/')}`
    })
</script>